package model.edge;

import model.vertex.Vertex;

public abstract class Edge {
	
<<<<<<< HEAD
	protected Vertex vertexInitial;
	protected Vertex vertexFinal;
	
	public Edge(Vertex vi, Vertex vf) {
		this.vertexInitial = vi;
		this.vertexFinal = vf;
	}

	public Vertex getVertexInicial() {
		return vertexInitial;
	}

	public void setVertexInicial(Vertex verticeInicial) {
		this.vertexInitial = verticeInicial;
=======
	protected Vertex initialVertex;
	protected Vertex finalVertex;
	
	public Edge(Vertex initialVertex, Vertex finalVertex) {
		this.initialVertex = initialVertex;
		this.finalVertex = finalVertex;
	}

	public Vertex getInitialVertex() {
		return initialVertex;
	}

	public void setInitialVertex(Vertex initialVertex) {
		this.initialVertex = initialVertex;
>>>>>>> 18224ba52d1b5951529db4feabb5f4bcb9eab40e
	}

	public Vertex getFinalVertex() {
		return finalVertex;
	}

	public void setFinalVertex(Vertex finalVertex) {
		this.finalVertex = finalVertex;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
<<<<<<< HEAD
		result = prime * result + ((vertexFinal == null) ? 0 : vertexFinal.hashCode());
		result = prime * result + ((vertexInitial == null) ? 0 : vertexInitial.hashCode());
=======
		result = prime * result + ((finalVertex == null) ? 0 : finalVertex.hashCode());
		result = prime * result + ((initialVertex == null) ? 0 : initialVertex.hashCode());
>>>>>>> 18224ba52d1b5951529db4feabb5f4bcb9eab40e
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Edge other = (Edge) obj;
		if (finalVertex == null) {
			if (other.finalVertex != null)
				return false;
		} else if (!finalVertex.equals(other.finalVertex))
			return false;
<<<<<<< HEAD
		if (vertexInitial == null) {
			if (other.vertexInitial != null)
				return false;
		} else if (!vertexInitial.equals(other.vertexInitial))
=======
		if (initialVertex == null) {
			if (other.initialVertex != null)
				return false;
		} else if (!initialVertex.equals(other.initialVertex))
>>>>>>> 18224ba52d1b5951529db4feabb5f4bcb9eab40e
			return false;
		return true;
	}

	@Override
	public String toString() {
<<<<<<< HEAD
		return vertexInitial + " -> " + vertexFinal;
=======
		return initialVertex + " -> " + finalVertex;
>>>>>>> 18224ba52d1b5951529db4feabb5f4bcb9eab40e
	}
	
}
